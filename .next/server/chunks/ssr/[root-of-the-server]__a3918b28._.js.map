{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/app/components/Header.tsx"],"sourcesContent":["\"use client\"\r\nimport { Avatar, Badge } from \"antd\"\r\nimport { BellOutlined, SearchOutlined } from \"@ant-design/icons\"\r\nimport { Input } from \"@mui/material\"\r\n\r\nconst Header = () => {\r\n\r\n\r\n  return (\r\n    <header className='flex items-center gap-4 z-50'>\r\n      <div className='relative w-full'>\r\n        <Input\r\n          placeholder='Search here'\r\n          disableUnderline\r\n          className='bg-[#161616] px-4 py-2 rounded-md w-full ps-10'\r\n        />\r\n        <div className='absolute left-4 top-[50%] -translate-y-[50%]'>\r\n          <SearchOutlined className='!text-[#6f6b7d]' />\r\n        </div>\r\n      </div>\r\n      {/* <Input\r\n        placeholder='Search here'\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        // onPressEnter={onSearch}\r\n        prefix={<SearchOutlined className='!text-[#6f6b7d]' />}\r\n        allowClear\r\n        className='!bg-[#161616] !text-white !border-none !rounded-md !py-2 !px-4 placeholder-gray'\r\n      /> */}\r\n      <Badge\r\n        count={1}\r\n        size='small'\r\n        offset={[-10, 10]}\r\n        className='!text-[#737373]'\r\n      >\r\n        <BellOutlined className='text-3xl text-gray-400' />\r\n      </Badge>\r\n      <div className='relative inline-block'>\r\n        <Avatar\r\n          size={38}\r\n          src='https://i.pravatar.cc/300'\r\n          className='border-2 border-white'\r\n        />\r\n        <span className='absolute bottom-0 right-0 block h-2 w-2 rounded-full ring-2 ring-white bg-green-500' />\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;AACA;AAHA;;;;;AAKA,MAAM,SAAS;IAGb,qBACE,8OAAC;QAAO,WAAU;;0BAChB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,8LAAA,CAAA,QAAK;wBACJ,aAAY;wBACZ,gBAAgB;wBAChB,WAAU;;;;;;kCAEZ,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,sNAAA,CAAA,iBAAc;4BAAC,WAAU;;;;;;;;;;;;;;;;;0BAY9B,8OAAC,gLAAA,CAAA,QAAK;gBACJ,OAAO;gBACP,MAAK;gBACL,QAAQ;oBAAC,CAAC;oBAAI;iBAAG;gBACjB,WAAU;0BAEV,cAAA,8OAAC,kNAAA,CAAA,eAAY;oBAAC,WAAU;;;;;;;;;;;0BAE1B,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,kLAAA,CAAA,SAAM;wBACL,MAAM;wBACN,KAAI;wBACJ,WAAU;;;;;;kCAEZ,8OAAC;wBAAK,WAAU;;;;;;;;;;;;;;;;;;AAIxB;uCAEe","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/app/components/AuthGuard.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { useEffect, useState } from \"react\"\r\nimport Cookies from \"js-cookie\"\r\nimport { useRouter } from \"next/navigation\"\r\n\r\nconst AuthGuard = ({ allowedRole, children }: { allowedRole: string, children: React.ReactNode }) => {\r\n  const router = useRouter()\r\n  const [authorized, setAuthorized] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const role = localStorage.getItem(\"role\") || Cookies.get(\"role\")\r\n\r\n    if (role === allowedRole) {\r\n      setAuthorized(true)\r\n    } else {\r\n      if (window.history.length > 1) {\r\n        router.back()\r\n      } else {\r\n        router.push('/')\r\n      }\r\n    }\r\n  }, [allowedRole, router])\r\n\r\n  if (!authorized) return null\r\n\r\n  return <>{children}</>\r\n}\r\n\r\nexport default AuthGuard\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMA,MAAM,YAAY,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAsD;IAC9F,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,OAAO,aAAa,OAAO,CAAC,WAAW,qJAAA,CAAA,UAAO,CAAC,GAAG,CAAC;QAEzD,IAAI,SAAS,aAAa;YACxB,cAAc;QAChB,OAAO;YACL,IAAI,OAAO,OAAO,CAAC,MAAM,GAAG,GAAG;gBAC7B,OAAO,IAAI;YACb,OAAO;gBACL,OAAO,IAAI,CAAC;YACd;QACF;IACF,GAAG;QAAC;QAAa;KAAO;IAExB,IAAI,CAAC,YAAY,OAAO;IAExB,qBAAO;kBAAG;;AACZ;uCAEe","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/app/constants/keys.ts"],"sourcesContent":["export const base_url = process.env.NEXT_PUBLIC_API_URL;\r\nexport const base_image_url = process.env.NEXT_PUBLIC_IMAGE_URL;\r\n"],"names":[],"mappings":";;;;AAAO,MAAM;AACN,MAAM","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/app/utils/auth.ts"],"sourcesContent":["export const auth = {\r\n  logout: async () => {\r\n    // const email =   localStorage.getItem('userEmail');\r\n    // console.log(email, 'emailemail');\r\n    // const lastOnboardingDate =   localStorage.getItem('lastOnboardingDate');\r\n    localStorage.clear();\r\n    // if (lastOnboardingDate) {\r\n    //       localStorage.setItem('lastOnboardingDate', lastOnboardingDate);\r\n    // }\r\n    // if (email) {\r\n    //       localStorage.setItem('userEmail', email);\r\n    // }\r\n  },\r\n  delete: async () => {\r\n    localStorage.clear();\r\n  },\r\n  accessToken: async () => {\r\n    return localStorage.getItem(\"accessToken\");\r\n  },\r\n  setToken: async (token: string) => {\r\n    return localStorage.setItem(\"accessToken\", token);\r\n  },\r\n  setRole: async (role: string) => {\r\n    return localStorage.setItem(\"role\", role);\r\n  },\r\n  refreshToken: async () => {\r\n    return localStorage.getItem(\"refreshToken\");\r\n  },\r\n  platform: async () => {\r\n    return localStorage.getItem(\"platform\");\r\n  },\r\n  setUser: async (userId: string) => {\r\n    localStorage.setItem(\"userId\", userId);\r\n  },\r\n  user: async () => {\r\n    return localStorage.getItem(\"userId\");\r\n  },\r\n  updateTokens: async (accessToken: string, refreshToken: string) => {\r\n    localStorage.setItem(\"accessToken\", accessToken);\r\n    localStorage.setItem(\"refreshToken\", refreshToken);\r\n  },\r\n};\r\n\r\nexport default auth;\r\n"],"names":[],"mappings":";;;;AAAO,MAAM,OAAO;IAClB,QAAQ;QACN,qDAAqD;QACrD,oCAAoC;QACpC,2EAA2E;QAC3E,aAAa,KAAK;IAClB,4BAA4B;IAC5B,wEAAwE;IACxE,IAAI;IACJ,eAAe;IACf,kDAAkD;IAClD,IAAI;IACN;IACA,QAAQ;QACN,aAAa,KAAK;IACpB;IACA,aAAa;QACX,OAAO,aAAa,OAAO,CAAC;IAC9B;IACA,UAAU,OAAO;QACf,OAAO,aAAa,OAAO,CAAC,eAAe;IAC7C;IACA,SAAS,OAAO;QACd,OAAO,aAAa,OAAO,CAAC,QAAQ;IACtC;IACA,cAAc;QACZ,OAAO,aAAa,OAAO,CAAC;IAC9B;IACA,UAAU;QACR,OAAO,aAAa,OAAO,CAAC;IAC9B;IACA,SAAS,OAAO;QACd,aAAa,OAAO,CAAC,UAAU;IACjC;IACA,MAAM;QACJ,OAAO,aAAa,OAAO,CAAC;IAC9B;IACA,cAAc,OAAO,aAAqB;QACxC,aAAa,OAAO,CAAC,eAAe;QACpC,aAAa,OAAO,CAAC,gBAAgB;IACvC;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/app/utils/axios.ts"],"sourcesContent":["import { base_url } from \"../constants/keys\";\r\nimport auth from \"./auth\";\r\nimport axios from \"axios\";\r\n\r\nexport const apiClient = axios.create({\r\n  baseURL: base_url,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"*\", //\r\n    \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, PATCH, OPTIONS\",\r\n  },\r\n});\r\napiClient.interceptors.request.use(\r\n  async (config) => {\r\n    const accessToken = await auth.accessToken();\r\n    if (accessToken) {\r\n      config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n      config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\r\n      config.headers[\"Access-Control-Allow-Methods\"] =\r\n        \"GET, POST, PUT, DELETE, PATCH, OPTIONS\";\r\n    }\r\n    if (config.data instanceof FormData) {\r\n      config.headers[\"Content-Type\"] = \"multipart/form-data\";\r\n      config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\r\n      config.headers[\"Access-Control-Allow-Methods\"] =\r\n        \"GET, POST, PUT, DELETE, PATCH, OPTIONS\";\r\n    } else {\r\n      config.headers[\"Content-Type\"] = \"application/json\";\r\n      config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\r\n      config.headers[\"Access-Control-Allow-Methods\"] =\r\n        \"GET, POST, PUT, DELETE, PATCH, OPTIONS\";\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// apiClient.interceptors.response.use(\r\n//   (response) => response,\r\n//   async (error) => {\r\n//     const originalRequest = error.config;\r\n//     if (error.response?.status === 401 && !originalRequest._retry) {\r\n//       originalRequest._retry = true;\r\n//       const refreshToken = await auth.refreshToken();\r\n\r\n//       if (refreshToken) {\r\n//         try {\r\n//           const response = await axios.post(`${baseUrl}/auth/refresh-token`, {\r\n//             refreshToken,\r\n//           });\r\n//           const { accessToken, refreshToken: newRefreshToken } =\r\n//             response.data.data;\r\n//           await auth.updateTokens(accessToken, newRefreshToken);\r\n//           originalRequest.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//           return axios(originalRequest);\r\n//         } catch (refreshError) {\r\n//           auth.logout();\r\n//           return Promise.reject(refreshError);\r\n//         }\r\n//       } else {\r\n//         auth.logout();\r\n//       }\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const queryFn = async <T>(\r\n  endpoint: string,\r\n  params?: Record<string, any>\r\n): Promise<T> => {\r\n  const response = await apiClient.get(endpoint, { params });\r\n  return response.data;\r\n};\r\n\r\nexport const mutationFn = async (\r\n  endpoint: string,\r\n  method: \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\",\r\n  body?: Record<string, any>,\r\n  headers?: Record<string, any>\r\n) => {\r\n  const response = await apiClient.request({\r\n    url: endpoint,\r\n    method,\r\n    data: body,\r\n    headers: {\r\n      ...headers,\r\n    },\r\n  });\r\n  return response.data;\r\n};"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEO,MAAM,YAAY,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACpC,SAAS,+HAAA,CAAA,WAAQ;IACjB,SAAS;QACP,gBAAgB;QAChB,+BAA+B;QAC/B,gCAAgC;IAClC;AACF;AACA,UAAU,YAAY,CAAC,OAAO,CAAC,GAAG,CAChC,OAAO;IACL,MAAM,cAAc,MAAM,2HAAA,CAAA,UAAI,CAAC,WAAW;IAC1C,IAAI,aAAa;QACf,OAAO,OAAO,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,aAAa;QACzD,OAAO,OAAO,CAAC,8BAA8B,GAAG;QAChD,OAAO,OAAO,CAAC,+BAA+B,GAC5C;IACJ;IACA,IAAI,OAAO,IAAI,YAAY,UAAU;QACnC,OAAO,OAAO,CAAC,eAAe,GAAG;QACjC,OAAO,OAAO,CAAC,8BAA8B,GAAG;QAChD,OAAO,OAAO,CAAC,+BAA+B,GAC5C;IACJ,OAAO;QACL,OAAO,OAAO,CAAC,eAAe,GAAG;QACjC,OAAO,OAAO,CAAC,8BAA8B,GAAG;QAChD,OAAO,OAAO,CAAC,+BAA+B,GAC5C;IACJ;IACA,OAAO;AACT,GACA,CAAC,QAAU,QAAQ,MAAM,CAAC;AAG5B,uCAAuC;AACvC,4BAA4B;AAC5B,uBAAuB;AACvB,4CAA4C;AAC5C,uEAAuE;AACvE,uCAAuC;AACvC,wDAAwD;AAExD,4BAA4B;AAC5B,gBAAgB;AAChB,iFAAiF;AACjF,4BAA4B;AAC5B,gBAAgB;AAChB,mEAAmE;AACnE,kCAAkC;AAClC,mEAAmE;AACnE,gFAAgF;AAChF,2CAA2C;AAC3C,mCAAmC;AACnC,2BAA2B;AAC3B,iDAAiD;AACjD,YAAY;AACZ,iBAAiB;AACjB,yBAAyB;AACzB,UAAU;AACV,QAAQ;AACR,oCAAoC;AACpC,MAAM;AACN,KAAK;AACL,UAAU,YAAY,CAAC,QAAQ,CAAC,GAAG,CACjC,CAAC,WAAa,UACd,OAAO;IACL,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGK,MAAM,UAAU,OACrB,UACA;IAEA,MAAM,WAAW,MAAM,UAAU,GAAG,CAAC,UAAU;QAAE;IAAO;IACxD,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,aAAa,OACxB,UACA,QACA,MACA;IAEA,MAAM,WAAW,MAAM,UAAU,OAAO,CAAC;QACvC,KAAK;QACL;QACA,MAAM;QACN,SAAS;YACP,GAAG,OAAO;QACZ;IACF;IACA,OAAO,SAAS,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/api/auth/authService.ts"],"sourcesContent":["import { apiClient } from \"@/app/utils/axios\"\r\n\r\nexport const getCurrentUser = async () => {\r\n  const { data } = await apiClient.get('auth/me')\r\n  return data.data\r\n}\r\n\r\nexport const updateUser = async (id: number, username: string, phone: string) => {\r\n  const { data } = await apiClient.patch('user/update', { id, username, phone })\r\n  return data\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,iBAAiB;IAC5B,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,4HAAA,CAAA,YAAS,CAAC,GAAG,CAAC;IACrC,OAAO,KAAK,IAAI;AAClB;AAEO,MAAM,aAAa,OAAO,IAAY,UAAkB;IAC7D,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,4HAAA,CAAA,YAAS,CAAC,KAAK,CAAC,eAAe;QAAE;QAAI;QAAU;IAAM;IAC5E,OAAO;AACT","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/api/auth/useAuth.ts"],"sourcesContent":["import { useMutation, useQuery, UseQueryOptions } from \"@tanstack/react-query\"\r\nimport { getCurrentUser, updateUser } from \"./authService\"\r\nimport { IAxiosError } from \"@/lib/axiosError\"\r\nimport queryClient from \"@/app/utils/queryClient\"\r\n\r\ntype updateUserPayload = {\r\n  id: number,\r\n  username: string\r\n  phone: string\r\n}\r\n\r\nexport const useGetCurrentUser = (options?: UseQueryOptions<any, IAxiosError>) => {\r\n  return useQuery<any, IAxiosError>({\r\n    queryKey: [\"currentUser\"],\r\n    queryFn: getCurrentUser,\r\n    ...options,\r\n  })\r\n}\r\n\r\nexport const useUpdateUser = () => {\r\n  return useMutation<any, IAxiosError, updateUserPayload>({\r\n    mutationFn: (payload) => updateUser(payload.id, payload.username, payload.phone),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"currentUser\"] })\r\n    },\r\n  })\r\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAEA;;;;AAQO,MAAM,oBAAoB,CAAC;IAChC,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAoB;QAChC,UAAU;YAAC;SAAc;QACzB,SAAS,iIAAA,CAAA,iBAAc;QACvB,GAAG,OAAO;IACZ;AACF;AAEO,MAAM,gBAAgB;IAC3B,OAAO,CAAA,GAAA,8KAAA,CAAA,cAAW,AAAD,EAAuC;QACtD,YAAY,CAAC,UAAY,CAAA,GAAA,iIAAA,CAAA,aAAU,AAAD,EAAE,QAAQ,EAAE,EAAE,QAAQ,QAAQ,EAAE,QAAQ,KAAK;QAC/E,WAAW;YACT,mIAAA,CAAA,UAAW,CAAC,iBAAiB,CAAC;gBAAE,UAAU;oBAAC;iBAAc;YAAC;QAC5D;IACF;AACF","debugId":null}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/store/authStore.ts"],"sourcesContent":["// stores/useUserStore.ts\r\nimport { create } from 'zustand'\r\nimport { persist } from 'zustand/middleware'\r\n\r\ninterface User {\r\n  id: number\r\n  username: string\r\n  email: string\r\n  emailVerified: boolean\r\n  createdAt: string\r\n  updatedAt: string\r\n}\r\n\r\ninterface UserStore {\r\n  user: User | null\r\n  setUser: (user: User) => void\r\n  clearUser: () => void\r\n}\r\n\r\nexport const authStore = create<UserStore>()(\r\n  persist(\r\n    (set) => ({\r\n      user: null,\r\n      setUser: (user) => set({ user }),\r\n      clearUser: () => set({ user: null }),\r\n    }),\r\n    {\r\n      name: 'user-storage',\r\n      skipHydration: true,\r\n    }\r\n  )\r\n)\r\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;AACzB;AACA;;;AAiBO,MAAM,YAAY,CAAA,GAAA,wIAAA,CAAA,SAAM,AAAD,IAC5B,CAAA,GAAA,6IAAA,CAAA,UAAO,AAAD,EACJ,CAAC,MAAQ,CAAC;QACR,MAAM;QACN,SAAS,CAAC,OAAS,IAAI;gBAAE;YAAK;QAC9B,WAAW,IAAM,IAAI;gBAAE,MAAM;YAAK;IACpC,CAAC,GACD;IACE,MAAM;IACN,eAAe;AACjB","debugId":null}},
    {"offset": {"line": 506, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Jawad/Desktop/Treasure-nft-clone/src/app/components/CurrentUserFetcher.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useGetCurrentUser } from \"@/api/auth/useAuth\";\r\nimport { authStore } from \"@/store/authStore\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst CurrentUserFetcher = () => {\r\n  const { data: userData, isSuccess } = useGetCurrentUser();\r\n  const { setUser } = authStore();\r\n\r\n  useEffect(() => {\r\n    if (isSuccess && userData) {\r\n      setUser(userData);\r\n    }\r\n  }, [isSuccess, userData, setUser]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default CurrentUserFetcher;"],"names":[],"mappings":";;;AAEA;AACA;AACA;AAJA;;;;AAMA,MAAM,qBAAqB;IACzB,MAAM,EAAE,MAAM,QAAQ,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,6HAAA,CAAA,oBAAiB,AAAD;IACtD,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,yHAAA,CAAA,YAAS,AAAD;IAE5B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,aAAa,UAAU;YACzB,QAAQ;QACV;IACF,GAAG;QAAC;QAAW;QAAU;KAAQ;IAEjC,OAAO;AACT;uCAEe","debugId":null}}]
}