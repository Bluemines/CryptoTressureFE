{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/abdulrauf/Downloads/Treasure-nft-clone/src/app/components/ClientOnly.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState, ReactNode } from 'react';\n\ntype ClientOnlyProps = {\n  children: ReactNode;\n};\n\nexport default function ClientOnly({ children }: ClientOnlyProps) {\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  if (!isMounted) return null;\n\n  return <>{children}</>;\n}\n"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAQe,SAAS,WAAW,EAAE,QAAQ,EAAmB;;IAC9D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,aAAa;QACf;+BAAG,EAAE;IAEL,IAAI,CAAC,WAAW,OAAO;IAEvB,qBAAO;kBAAG;;AACZ;GAVwB;KAAA","debugId":null}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["file:///Users/abdulrauf/Downloads/Treasure-nft-clone/src/app/lib/theme.tsx"],"sourcesContent":["\"use client\"\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#7367F0',\n    },\n  },\n  \n  components: {\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'capitalize',\n        },\n      },\n    },\n  },\n});\n\nexport default theme;\n"],"names":[],"mappings":";;;AACA;AADA;;AAGA,MAAM,QAAQ,CAAA,GAAA,8MAAA,CAAA,cAAW,AAAD,EAAE;IACxB,SAAS;QACP,MAAM;QACN,SAAS;YACP,MAAM;QACR;IACF;IAEA,YAAY;QACV,WAAW;YACT,gBAAgB;gBACd,MAAM;oBACJ,eAAe;gBACjB;YACF;QACF;IACF;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/abdulrauf/Downloads/Treasure-nft-clone/src/app/components/ui/CustomToast.tsx"],"sourcesContent":["\"use client\";\nimport { Snackbar, Alert, AlertTitle } from \"@mui/material\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport React, { useEffect, useState } from \"react\";\n\ntype CustomToastProps = {\n  title?: string;\n  message: string;\n  severity?: \"success\" | \"info\" | \"warning\" | \"error\";\n  icon?: React.ReactNode;\n  backgroundColor?: string;\n  textColor?: string;\n  duration?: number; // optional duration in ms (default: 3000)\n};\n\nexport default function CustomToast({\n  title = \"Success\",\n  message,\n  severity = \"success\",\n  icon = <CheckCircleIcon fontSize=\"inherit\" />,\n  backgroundColor = \"#112D1D\",\n  textColor = \"#4ADE80\",\n  duration = 3000,\n}: CustomToastProps) {\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    setOpen(true);\n    const timer = setTimeout(() => setOpen(false), duration);\n    return () => clearTimeout(timer);\n  }, [duration]);\n\n  return (\n    <Snackbar open={open} onClose={() => setOpen(false)}>\n      <Alert\n        icon={icon}\n        severity={severity}\n        sx={{\n          width: \"100%\",\n          backgroundColor,\n          color: textColor,\n          alignItems: \"flex-start\",\n          borderRadius: \"8px\",\n          boxShadow: 3,\n          \".MuiAlert-icon\": {\n            color: textColor,\n            marginTop: \"5px\",\n          },\n        }}\n      >\n        <AlertTitle sx={{ fontWeight: 600 }}>{title}</AlertTitle>\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AACA;AACA;;;AAHA;;;;AAee,SAAS,YAAY,EAClC,QAAQ,SAAS,EACjB,OAAO,EACP,WAAW,SAAS,EACpB,qBAAO,6LAAC,mKAAA,CAAA,UAAe;IAAC,UAAS;;;;;QAAY,EAC7C,kBAAkB,SAAS,EAC3B,YAAY,SAAS,EACrB,WAAW,IAAI,EACE;;IACjB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEjC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,QAAQ;YACR,MAAM,QAAQ;+CAAW,IAAM,QAAQ;8CAAQ;YAC/C;yCAAO,IAAM,aAAa;;QAC5B;gCAAG;QAAC;KAAS;IAEb,qBACE,6LAAC,0MAAA,CAAA,WAAQ;QAAC,MAAM;QAAM,SAAS,IAAM,QAAQ;kBAC3C,cAAA,6LAAC,iMAAA,CAAA,QAAK;YACJ,MAAM;YACN,UAAU;YACV,IAAI;gBACF,OAAO;gBACP;gBACA,OAAO;gBACP,YAAY;gBACZ,cAAc;gBACd,WAAW;gBACX,kBAAkB;oBAChB,OAAO;oBACP,WAAW;gBACb;YACF;;8BAEA,6LAAC,gNAAA,CAAA,aAAU;oBAAC,IAAI;wBAAE,YAAY;oBAAI;8BAAI;;;;;;gBACrC;;;;;;;;;;;;AAIT;GAxCwB;KAAA","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/abdulrauf/Downloads/Treasure-nft-clone/src/app/utils/queryClient.tsx"],"sourcesContent":["\"use client\"\nimport { QueryClient } from '@tanstack/react-query';\nimport CustomToast from '../components/ui/CustomToast';\n\nconst queryClient = new QueryClient({\n    defaultOptions: {\n        // queries: {\n        //   onError: (error: any) => {\n        //     const errorMessage = error.response?.data?.message;\n        //     Toast.show({\n        //       type: \"error\",\n        //       text1: \"Error\",\n        //       text2: errorMessage,\n        //     });\n        //   },\n        // },\n        mutations: {\n            onError: (error: any) => {\n                const errorMessage = error.response?.data?.message;\n                <CustomToast title='error' backgroundColor='red' message={errorMessage}/>\n            },\n            // onSuccess: (data: any) => {\n            //     const successMessage = data?.message;\n            //     Toast.show({\n            //         type: 'success',\n            //         text1: 'Success',\n            //         text2: successMessage,\n            //     });\n            // },\n        },\n    },\n});\n\nexport default queryClient;\n"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;;AAIA,MAAM,cAAc,IAAI,gLAAA,CAAA,cAAW,CAAC;IAChC,gBAAgB;QACZ,aAAa;QACb,+BAA+B;QAC/B,0DAA0D;QAC1D,mBAAmB;QACnB,uBAAuB;QACvB,wBAAwB;QACxB,6BAA6B;QAC7B,UAAU;QACV,OAAO;QACP,KAAK;QACL,WAAW;YACP,SAAS,CAAC;gBACN,MAAM,eAAe,MAAM,QAAQ,EAAE,MAAM;8BAC3C,6LAAC,iJAAA,CAAA,UAAW;oBAAC,OAAM;oBAAQ,iBAAgB;oBAAM,SAAS;;;;;;YAC9D;QASJ;IACJ;AACJ;uCAEe","debugId":null}}]
}